{"version":3,"sources":["ToDoItem.js","App.js","index.js"],"names":["ToDoList","props","editing","toggleEditing","editButtons","className","onClick","newValue","document","querySelector","id","value","trim","length","onEdit","IoIosCheckmarkCircle","AiFillCloseCircle","BiEditAlt","type","text","onDelete","RiDeleteBin6Line","App","useState","inputValue","setInputValue","items","setItems","deleteItems","oldItems","filter","arrElem","index","editItems","newText","map","item","toggleEditingState","RiTodoFill","placeholder","onChange","event","preventDefault","target","itemVal","ToDoItem","ReactDOM","render","StrictMode","getElementById"],"mappings":"gRAwDeA,EAlDE,SAACC,GACd,IAAMC,EAAUD,EAAMC,QAChBC,EAAgBF,EAAME,cACxBC,EAAc,KAgClB,OA9BEA,EADEF,EAEA,qCACE,wBACEG,UAAU,cACVC,QAAS,WAAM,IAAD,IACNC,EAAQ,UAAGC,SAASC,cAAT,oBAAoCR,EAAMS,GAA1C,cAAH,aAAG,EAAmDC,OACxD,OAARJ,QAAQ,IAARA,GAAA,UAAAA,EAAUK,cAAV,eAAkBC,QAAS,IAC7BZ,EAAMa,OAAOb,EAAMS,GAAIH,GACvBJ,EAAcF,EAAMS,MAN1B,SASI,cAACK,EAAA,qBAAD,MAEJ,wBACEV,UAAU,cACVC,QAAS,WAAMH,EAAcF,EAAMS,KAFrC,SAGI,cAACM,EAAA,kBAAD,SAMN,wBACEX,UAAU,cACVC,QAAS,WAAMH,EAAcF,EAAMS,KAFrC,SAGI,cAACO,EAAA,UAAD,MAMN,sBAAKZ,UAAU,aAAf,UACA,6BACIH,EAAU,uBAAOgB,KAAK,OAAO,UAASjB,EAAMS,KAAQ,mCAAMT,EAAMkB,KAAZ,SAEpD,wBACEd,UAAU,gBACVC,QAAS,WAAML,EAAMmB,SAASnB,EAAMS,KAFtC,SAGI,cAACW,EAAA,iBAAD,MAEHjB,M,QC0CIkB,MAxFf,WACE,MAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAA0BF,mBAAS,IAAnC,mBAAOG,EAAP,KAAcC,EAAd,KAgBMC,EAAc,SAAClB,GACnBiB,GAAU,SAACE,GACT,OAAOA,EAASC,QAAO,SAACC,EAASC,GAC/B,OAAOA,IAAUtB,SAMjBuB,EAAY,SAACvB,EAAIwB,GACrBP,GAAU,SAACE,GACT,OAAOA,EAASM,KAAI,SAACJ,EAASC,GAC5B,IAAQ9B,EAAY6B,EAAZ7B,QACR,OAAO8B,IAAUtB,EAAK,CAAC0B,KAAMF,EAAShC,WAAW6B,SAKjDM,EAAqB,SAAC3B,GAC1BiB,GAAU,SAACE,GACT,OAAOA,EAASM,KAAI,SAACJ,EAASC,GAC5B,OAAIA,IAAUtB,EACL,CACL0B,KAAML,EAAQK,KACdlC,SAAU6B,EAAQ7B,SAGb6B,SAOf,OACE,mCACA,qBAAK1B,UAAU,WAAf,SACA,sBAAKA,UAAU,aAAf,UACE,+BAAI,cAACiC,EAAA,WAAD,IAAJ,cACA,uBACEpB,KAAK,OACLP,MAAOa,EACPe,YAAc,aACdC,SAxDY,SAACC,GACjBA,EAAMC,iBACNjB,EAAcgB,EAAME,OAAOhC,UAwDzB,wBAAQN,UAAU,qBAAqBC,QAtDzB,WAAM,IAAD,GACR,OAAVkB,QAAU,IAAVA,GAAA,UAAAA,EAAYZ,cAAZ,eAAoBC,QAAQ,IAC7Bc,GAAU,SAACE,GACT,MAAM,GAAN,mBAAWA,GAAX,CAAqB,CAACO,KAAMZ,EAAYtB,SAAS,QAEnDuB,EAAc,MAiDd,iBACA,6BAGIC,EAAMS,KAAK,WAA2BH,GAAW,IAA9BY,EAA6B,EAAnCR,KAAelC,EAAoB,EAApBA,QAC1B,OACE,cAAC2C,EAAD,CAEEnC,GAAIsB,EACJb,KAAMyB,EACNxB,SAAUQ,EACVd,OAAQmB,EACR/B,QAASA,EACTC,cAAekC,GAPjB,UACUL,EADV,YACmBY,iBCtEjCE,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFxC,SAASyC,eAAe,W","file":"static/js/main.331ea332.chunk.js","sourcesContent":["import React from \"react\";\nimport {RiDeleteBin6Line } from \"@react-icons/all-files/ri/RiDeleteBin6Line\";\nimport {BiEditAlt } from \"@react-icons/all-files/bi/BiEditAlt\";\nimport { AiFillCloseCircle } from '@react-icons/all-files/ai/AiFillCloseCircle';\nimport { IoIosCheckmarkCircle } from '@react-icons/all-files/io/IoIosCheckmarkCircle';\n\nconst ToDoList = (props) => {\n    const editing = props.editing;\n    const toggleEditing = props.toggleEditing;\n    let editButtons = null;\n    if (editing) {\n      editButtons = (\n        <>\n          <button \n            className=\"edit-button\" \n            onClick={() =>{\n              const newValue = document.querySelector(`[data-id=\"${props.id}\"]`)?.value;\n              if (newValue?.trim()?.length > 0) {\n                props.onEdit(props.id, newValue);\n                toggleEditing(props.id);                \n              }\n            }}>\n              <IoIosCheckmarkCircle  />\n          </button>\n          <button \n            className=\"edit-button\" \n            onClick={() =>{toggleEditing(props.id)}}>\n              <AiFillCloseCircle />\n          </button> \n        </>\n      );\n    } else {\n      editButtons = (\n        <button \n          className=\"edit-button\" \n          onClick={() =>{toggleEditing(props.id)}}>\n            <BiEditAlt />\n        </button>\n      );\n    }\n\n    return (\n      <div className=\"todo-style\">\n      <ul>\n        { editing ? <input type=\"text\" data-id={props.id}/> : <li> {props.text} </li> }\n      </ul>\n          <button \n            className=\"delete-button\" \n            onClick={() =>{props.onDelete(props.id)}}>\n              <RiDeleteBin6Line />\n          </button>\n          {editButtons}\n      </div>\n    ) \n}\n\nexport default ToDoList;\n","import { useState } from 'react';\nimport './App.css';\nimport ToDoItem from './ToDoItem';\nimport {RiTodoFill } from \"@react-icons/all-files/ri/RiTodoFill\";\n\nfunction App() {\n  const [inputValue, setInputValue] = useState(\"\");\n  const [items, setItems] = useState([]);\n \n\n  const itemEvent = (event) => {\n    event.preventDefault();\n    setInputValue(event.target.value);\n  };\n  const addToList = () =>{\n    if(inputValue?.trim()?.length >0) {\n      setItems( (oldItems) => {\n        return [...oldItems, {item: inputValue, editing: false}];\n      })\n      setInputValue(\"\");\n    }\n  }\n  \n  const deleteItems = (id) => {\n    setItems( (oldItems) => {\n      return oldItems.filter((arrElem, index) => {\n        return index !== id;\n       \n      });\n    });\n  }\n\n  const editItems = (id, newText) =>{\n    setItems( (oldItems) => {\n      return oldItems.map((arrElem, index) => {\n        const { editing } = arrElem;\n        return index === id ? {item: newText, editing} : arrElem;\n      });\n    });\n  }\n\n  const toggleEditingState = (id) => {\n    setItems( (oldItems) => {\n      return oldItems.map((arrElem, index) => {\n        if (index === id) {\n          return {\n            item: arrElem.item, \n            editing: !arrElem.editing\n          }\n        } else {\n          return arrElem;\n        }\n      });\n    });\n  }\n  \n\n  return (\n    <>\n    <div className=\"main-div\">\n    <div className=\"center-div\">\n      <h1><RiTodoFill />ToDoList</h1>\n      <input \n        type=\"text\"\n        value={inputValue}\n        placeholder = \"Add a item\"\n        onChange={itemEvent}\n       />\n      <button className=\"add-to-list-button\" onClick={addToList}> + </button>\n      <ol>\n      \n        {\n          items.map( ({item: itemVal, editing}, index) => {\n            return (\n              <ToDoItem \n                key={`${index}-${itemVal}`}\n                id={index}\n                text={itemVal}\n                onDelete={deleteItems}\n                onEdit={editItems}\n                editing={editing}\n                toggleEditing={toggleEditingState}\n              />\n            )\n          })\n        }\n      </ol>\n    </div>\n    </div>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}